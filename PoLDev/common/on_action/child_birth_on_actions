# On actions for child birth and pregnancy notification events, triggered automatically by the game

# called for the mother
# scope:child is the new born character
# scope:mother is the pregnant mother
# scope:real_father is the biological father
# scope:father is the family father (not the biological)
on_birth_mother = {
	events = {
		birth.0001 #No one dies - hidden event that selects visible birth event based on bastard status and complication rolls
		birth.3011 #Mother dies
	}
	effect = {
		# Gain piety from Sacred Childbirth doctrine
		if = {
			limit = {
				faith = { has_doctrine_parameter = piety_from_childbirth_active }
			}
			send_interface_toast = {
				type = event_generic_neutral
				title = piety_from_childbirth_toast
				left_icon = scope:child
				right_icon = scope:father
				if = {
					limit = {
						scope:child = { has_any_bastard_trait_trigger = no }
					}
					add_piety = major_piety_gain
				}
				else = {
					add_piety = minor_piety_gain
				}
			}
		}
		scope:child = {
			if = {
				limit = { has_trait = twin }
				random_sibling = {
					limit = { is_twin_of = scope:child }
					save_scope_as = child_2
				}
			}
		}

		if = {
			limit = {
				NOT = {
					any_child = {
						even_if_dead = yes
						NOT = {
							this = scope:child
						}
					}
				}
			}
			create_character_memory = {
				type = first_born
				participants = {
					child = scope:child
				}
			}
		}
		else = {
			if = {
				limit = { exists = scope:child_2 }
				create_character_memory = {
					type = twins_born
					participants = {
						child = scope:child
						child_2 = scope:child_2
					}
				}
			}
			else = {
				create_character_memory = {
					type = child_born
					participants = {
						child = scope:child
					}
				}
			}
		}
		#BF deal with baby boys
		if = {
			limit = {
				faith = { religion_tag = blackfury_religion }
				has_trait = werewolf
				scope:child = { is_female = no }	
			}
			trigger_event = POD_werewolves_maintenance.4
		}
	}
}


# called for the father
# scope:child is the new born character
# scope:mother is the pregnant mother
# scope:real_father is the biological father
# scope:father is the family father (not the biological)
on_birth_father = {
	events = {

	}
	effect = {
		# Gain piety from Sacred Childbirth doctrine
		if = {
			limit = {
				faith = { has_doctrine_parameter = piety_from_childbirth_active }
			}
			send_interface_toast = {
				type = event_generic_neutral
				title = piety_from_childbirth_toast
				left_icon = scope:child
				right_icon = scope:father
				if = {
					limit = {
						scope:child = { has_any_bastard_trait_trigger = no }
					}
					add_piety = major_piety_gain
				}
				else = {
					add_piety = minor_piety_gain
				}
			}
		}
        scope:child = {
            if = {
                limit = { has_trait = twin }
                random_sibling = {
                    limit = { is_twin_of = scope:child }
                    save_scope_as = child_2
                }
            }
        }
		
		if = {
			limit = {
				NOT = {
					any_child = {
						even_if_dead = yes
						NOT = {
							this = scope:child
						}
					}
				}
			}
			create_character_memory = {
				type = first_born
				participants = {
					child = scope:child
				}
			}
		}
		else = {
			if = {
				limit = { exists = scope:child_2 }
				create_character_memory = {
					type = twins_born
					participants = {
						child = scope:child
						child_2 = scope:child_2
					}
				}
			}
			else = {
				create_character_memory = {
					type = child_born
					participants = {
						child = scope:child
					}
				}
			}
		}
	}
}

# called for the biological father
# only called if father and real father are different
# scope:child is the new born character
# scope:mother is the pregnant mother
# scope:real_father is the biological father
# scope:father is the family father (not the biological)
on_birth_real_father = {
	events = {

	}
}

# called for the newborn child
# scope:child is the new born character
# scope:mother is the pregnant mother
# scope:father is the family father (not the biological)
# scope:real_father is the biological father
# scope:is_bastard, true if a known bastard
on_birth_child = {
	events = {
		middle_east_decisions.0012 #Saoshyant Descendants.
		major_decisions.0101 #Divine/Consecrated Blood Descendants.
		birth.8001 #Reincarnation
		birth.8011 #Born in the Purple
		trait_specific.0500 #To handle genetic traits not expressed until later in life
		debug.0010 # Disease data tracking
	}
	effect = {
		# Make sure that children aren't Lowborn if one of their parents are, in fact, of noble stock
		if = {
			limit = {
				scope:is_bastard = no
				scope:child = {
					is_lowborn = yes
				}
				OR = {
					AND = {
						exists = scope:father
						scope:father = {
							is_lowborn = no
						}
					}
					scope:mother = {
						is_lowborn = no
					}
				}
			}
			if = {
				limit = {
					NOT = {
						exists = scope:father
					}
					exists = mother.house
				}
				set_house = mother.house
			}
			else_if = {
				limit = {
					exists = scope:father
					exists = mother.house
					scope:father = {
						OR = {
							AND = {
								is_spouse_of = scope:mother
								matrilinear_marriage = yes
							}
							is_concubine_of = scope:mother
						}
					}
				}
				set_house = mother.house
			}
			else_if = {
				limit = {
					exists = scope:father
					exists = father.house
				}
				set_house = father.house
			}
			else = {
				set_house = mother.house
			}
		}
	
		#Add bastardy traits and set correct House
		if = {
			limit = {
				scope:is_bastard = yes
			}
			add_bastard_trait_based_on_faith_effect = yes

			if = {
				limit = {
					scope:mother = {
						has_character_flag = pregnancy_real_father_of_bastard_is_known_flag
					}
				}
				#Set father and house
				set_father = scope:real_father
			}
			set_parent_house_effect = yes

			#Set conditions for any twins
			scope:mother = {
				every_child = {
					limit = {
						is_twin_of = scope:child
					}
					add_bastard_trait_based_on_faith_effect = yes
					if = {
						limit = {
							scope:mother = {
								has_character_flag = pregnancy_real_father_of_bastard_is_known_flag
							}
						}
						#Set father and house
						set_father = scope:real_father
					}
					set_parent_house_effect = yes
				}
			}
		}

		#Add house hook
		if = {
			limit = {
				is_alive = yes
				exists = scope:child.house
				scope:child.house.house_head = { is_alive =yes }
				NOT = {
					scope:child = scope:child.house.house_head # If the house dies out, a posthumous child can revive it
				}
				#No need to check if the hook can be added, the kid was just born
			}
			scope:child.house.house_head = {
				add_hook_no_toast = {
					type = house_head_hook
					target = scope:child
				}
			}
			
			if = {
				limit = {
					scope:child.house.house_head = { 
						OR = {
							has_trait = shemsuheru
							has_trait = banemummy
							has_trait = cabiri
						}
					}
				}
				set_relation_worshipped_reborn = scope:child.house.house_head
			}
		}

		if = {
			limit = {
				exists = scope:father
				exists = scope:mother
				scope:mother = { is_concubine_of = scope:father }
			}
			add_trait = child_of_concubine_female
		}
		if = {
			limit = {
				exists = scope:father
				exists = scope:mother
				scope:father = { is_concubine_of = scope:mother }
			}
			add_trait = child_of_concubine_male
		}

		hidden_effect = {
			every_parent = {
				limit = { has_perk = sound_foundations_perk	}
				sound_foundations_skill_gain_effect = yes
			}
		}

		# Blood legacy 4 extra genetic trait chance effect
		hidden_effect = {
			if = {
				limit = {
					exists = scope:child.dynasty
					scope:child.dynasty = { has_dynasty_perk = blood_legacy_4 }
					OR = { # The child must have a real parent of the Dynasty...
						scope:mother.dynasty = scope:child.dynasty
						scope:real_father.dynasty = scope:child.dynasty
					}
				}
				if = {
					limit = {
						scope:child.dynasty = {
							exists = var:blood_legacy_4_beauty_good_1
						}
						NOR = {
							has_trait = beauty_good
							has_trait = beauty_bad
						}
					}
					random = {
						chance = blood_legacy_4_chance
						modifier = {
							add = blood_legacy_4_extra_player_chance
							any_parent = { is_ai = no }
						}
						add_trait = beauty_good_1
					}
				}
				else_if = {
					limit = {
						scope:child.dynasty = {
							exists = var:blood_legacy_4_intellect_good_1
						}
						NOR = {
							has_trait = intellect_good
							has_trait = intellect_bad
						}
					}
					random = {
						chance = blood_legacy_4_chance
						modifier = {
							add = blood_legacy_4_extra_player_chance
							any_parent = { is_ai = no }
						}
						add_trait = intellect_good_1
					}
				}
				else_if = {
					limit = {
						scope:child.dynasty = {
							exists = var:blood_legacy_4_physique_good_1
						}
						NOR = {
							has_trait = physique_good
							has_trait = physique_bad
						}
					}
					random = {
						chance = blood_legacy_4_chance
						modifier = {
							add = blood_legacy_4_extra_player_chance
							any_parent = { is_ai = no }
						}
						add_trait = physique_good_1
					}
				}
				else_if = {
					limit = {
						scope:child.dynasty = {
							exists = var:blood_legacy_4_fecund
						}
						NOR = {
							has_trait = infertile
							has_trait = fecund
						}
					}
					random = {
						chance = blood_legacy_4_chance
						modifier = {
							add = blood_legacy_4_extra_player_chance
							any_parent = { is_ai = no }
						}
						add_trait = fecund
					}
				}
				else_if = {
					limit = {
						scope:child.dynasty = {
							exists = var:blood_legacy_4_giant
						}
						NOR = {
							has_trait = giant
							has_trait = dwarf
						}
					}
					random = {
						chance = blood_legacy_4_chance
						modifier = {
							add = blood_legacy_4_extra_player_chance
							any_parent = { is_ai = no }
						}
						add_trait = giant
					}
				}
				else_if = {
					limit = {
						scope:child.dynasty = {
							exists = var:blood_legacy_4_dwarf
						}
						NOR = {
							has_trait = giant
							has_trait = dwarf
						}
					}
					random = {
						chance = blood_legacy_4_chance
						modifier = {
							add = blood_legacy_4_extra_player_chance
							any_parent = { is_ai = no }
						}
						add_trait = dwarf
					}
				}
				else_if = {
					limit = {
						scope:child.dynasty = {
							exists = var:blood_legacy_4_albino
						}
						NOT = {
							has_trait = albino
						}
					}
					random = {
						chance = blood_legacy_4_chance
						modifier = {
							add = blood_legacy_4_extra_player_chance
							any_parent = { is_ai = no }
						}
						add_trait = albino
					}
				}
				else_if = {
					limit = {
						scope:child.dynasty = {
							exists = var:blood_legacy_4_scaly
						}
						NOT = {
							has_trait = scaly
						}
					}
					random = {
						chance = blood_legacy_4_chance
						modifier = {
							add = blood_legacy_4_extra_player_chance
							any_parent = { is_ai = no }
						}
						add_trait = scaly
					}
				}
			}
		}
		
		# Neteru legacy perk 2
		hidden_effect = {
			if = {
				limit = {
					OR = {
						AND = {
							exists = scope:father
							scope:father = {
								OR = {
									has_character_modifier = POD_neteru_legacy_2_modifier
									has_character_modifier = POD_neteru_legacy_3_modifier
									has_character_modifier = POD_neteru_legacy_4_modifier
									has_character_modifier = POD_neteru_legacy_5_modifier
								}
							}
						}
						AND = {
							exists = scope:mother
							scope:mother = {
								OR = {
									has_character_modifier = POD_neteru_legacy_2_modifier
									has_character_modifier = POD_neteru_legacy_3_modifier
									has_character_modifier = POD_neteru_legacy_4_modifier
									has_character_modifier = POD_neteru_legacy_5_modifier
								}
							}
						}
					}
				}
				if = {
					limit = {
						has_trait = beauty_bad_1
					}
					random = {
						chance = 50
						remove_trait = beauty_bad_1
					}
				}
				if = {
					limit = {
						has_trait = beauty_bad_2
					}
					random = {
						chance = 50
						remove_trait = beauty_bad_2
					}
				}
				if = {
					limit = {
						has_trait = beauty_bad_3
					}
					random = {
						chance = 50
						remove_trait = beauty_bad_3
					}
				}
				if = {
					limit = {
						has_trait = intellect_bad_1
					}
					random = {
						chance = 50
						remove_trait = intellect_bad_1
					}
				}
				if = {
					limit = {
						has_trait = intellect_bad_2
					}
					random = {
						chance = 50
						remove_trait = intellect_bad_2
					}
				}
				if = {
					limit = {
						has_trait = intellect_bad_3
					}
					random = {
						chance = 50
						remove_trait = intellect_bad_3
					}
				}
				if = {
					limit = {
						has_trait = physique_bad_1
					}
					random = {
						chance = 50
						remove_trait = physique_bad_1
					}
				}
				if = {
					limit = {
						has_trait = physique_bad_2
					}
					random = {
						chance = 50
						remove_trait = physique_bad_2
					}
				}
				if = {
					limit = {
						has_trait = physique_bad_3
					}
					random = {
						chance = 50
						remove_trait = physique_bad_3
					}
				}
				if = {
					limit = {
						has_trait = clubfooted
					}
					random = {
						chance = 50
						remove_trait = clubfooted
					}
				}
				if = {
					limit = {
						has_trait = hunchbacked
					}
					random = {
						chance = 50
						remove_trait = hunchbacked
					}
				}
				if = {
					limit = {
						has_trait = lisping
					}
					random = {
						chance = 50
						remove_trait = lisping
					}
				}
				if = {
					limit = {
						has_trait = stuttering
					}
					random = {
						chance = 50
						remove_trait = stuttering
					}
				}
				if = {
					limit = {
						has_trait = dwarf
					}
					random = {
						chance = 50
						remove_trait = dwarf
					}
				}
				if = {
					limit = {
						has_trait = spindly
					}
					random = {
						chance = 50
						remove_trait = spindly
					}
				}
				if = {
					limit = {
						has_trait = scaly
					}
					random = {
						chance = 50
						remove_trait = scaly
					}
				}
				if = {
					limit = {
						has_trait = wheezing
					}
					random = {
						chance = 50
						remove_trait = wheezing
					}
				}
				if = {
					limit = {
						has_trait = bleeder
					}
					random = {
						chance = 50
						remove_trait = bleeder
					}
				}
				if = {
					limit = {
						has_trait = infertile
					}
					random = {
						chance = 50
						remove_trait = infertile
					}
				}
				if = {
					limit = {
						has_trait = possessed_genetic
					}
					random = {
						chance = 50
						remove_trait = possessed_genetic
					}
				}
				if = {
					limit = {
						has_trait = depressed_genetic
					}
					random = {
						chance = 50
						remove_trait = depressed_genetic
					}
				}
				if = {
					limit = {
						has_trait = lunatic_genetic
					}
					random = {
						chance = 50
						remove_trait = lunatic_genetic
					}
				}
				if = {
					limit = {
						has_trait = inbred
					}
					random = {
						chance = 50
						remove_trait = inbred
					}
				}
			}
		}
		
		# Fae/Changeling/Kinain
		if = {
			limit = {
				has_supernatural_race_trigger = no
				exists = mother
				exists = real_father
				mother = { has_trait = fae }
				real_father = { has_trait = fae }
			}
			add_trait = fae
			POD_fae_initialization_effect = yes
			add_character_flag = had_POD_character_initialization
		}
		else_if = {
			limit = {
				has_supernatural_race_trigger = no
				exists = mother
				exists = real_father
				OR = { 
					AND = { 
						mother = { has_trait = fae }
						real_father = { has_trait = changeling }
					}
					AND = { 
						mother = { has_trait = changeling }
						real_father = { has_trait = fae }
					}
				}
			}
			add_trait = changeling
			POD_changeling_initialization_effect = yes
			add_character_flag = had_POD_character_initialization
		}
		else_if = {
			limit = {
				has_supernatural_race_trigger = no
				OR = {
					AND = {
						exists = mother
						mother = { 
							OR = { 
								has_trait = fae	
								has_trait = changeling
								has_trait = kinain
							}
						}
					}
					AND = {
						exists = real_father
						real_father = { 
							OR = { 
								has_trait = fae	
								has_trait = changeling
								has_trait = kinain
							}
						}
					}
				}
			}
			add_trait = kinain
			POD_kinain_initialization_effect = yes
			add_character_flag = had_POD_character_initialization
			
			random = {
				chance = 25
				
				modifier = {
					add = 25
					AND = {
						exists = mother
						mother = { 
							has_trait = fae
						}
					}
				}
				modifier = {
					add = 10
					AND = {
						exists = mother
						mother = { 
							has_trait = changeling
						}
					}
				}
				modifier = {
					add = 5
					AND = {
						exists = mother
						mother = { 
							has_trait = kinain
						}
					}
				}
				
				modifier = {
					add = 25
					AND = {
						exists = real_father
						real_father = { 
							has_trait = fae
						}
					}
				}
				modifier = {
					add = 10
					AND = {
						exists = real_father
						real_father = { 
							has_trait = changeling
						}
					}
				}
				modifier = {
					add = 5
					AND = {
						exists = real_father
						real_father = { 
							has_trait = kinain
						}
					}
				}
				
				modifier = {
					add = 10
					AND = {
						exists = real_father
						real_father = { 
							OR = {
								has_trait = fae
								has_trait = changeling
							}
							is_ai = yes
							is_landed = yes
						}
					}
				}
				modifier = {
					add = 10
					AND = {
						exists = mother
						mother = { 
							OR = {
								has_trait = fae
								has_trait = changeling
							}
							is_ai = yes
							is_landed = yes							
						}
					}
				}
				
				trigger_event = { 			
					id = POD_fae_maintenance.1
					years = { 13 18 }
				}
			}
		}
		#Kinfolk/First Change	
		if = {
			limit = {
				has_supernatural_race_trigger = no
				OR = {
					AND = {
						exists = mother
						mother = { 
							OR = {
								has_trait = kinfolk
								has_trait = shapeshifter
							}
						}
					}
					AND = {
						exists = real_father
						real_father = { 
							OR = {
								has_trait = kinfolk
								has_trait = shapeshifter
							}
						}
					}
				}
			}
			
			add_trait = kinfolk

			random = {
				chance = 10
				add_trait = gnosis
				POD_assign_initial_gnosis_effect = yes
			}
				
			add_character_flag = had_POD_character_initialization
		
			
			random = {
				chance = 25
				
				modifier = {
					add = 25
					AND = {
						exists = mother
						mother = { 
							has_trait = werewolf
						}
					}
				}
				
				modifier = {
					add = 25
					AND = {
						exists = real_father
						real_father = { 
							has_trait = werewolf
						}
					}
				}
				
				modifier = {
					add = 10
					AND = {
						exists = real_father
						real_father = { 
							has_trait = werewolf
							is_ai = yes
							is_landed = yes
						}
					}
				}

				modifier = {
					add = 10
					AND = {
						exists = mother
						mother = { 
							has_trait = werewolf
							is_ai = yes
							is_landed = yes							
						}
					}
				}
				
				modifier = {
					add = 20		
					any_close_family_member = {
						is_landed = yes
						is_ai = yes
						has_trait = werewolf
					}
				}
				
				modifier = {
					add = 10
					has_trait = gnosis
				}
				
				add_character_flag = {
					flag = will_have_first_change
					days = 100
				}
				
				trigger_event = { 			
					id = POD_werewolves_maintenance.2
					years = { 13 18 }
				}
			}
			
			if = {
				limit = {
					exists = mother
					mother = { 
						is_ai = no
					}
				}
				save_scope_as = kinfolk_child
				mother = { 
					trigger_event = { 			
						id = POD_werewolves_interactions.15
						days = 30
					}
				}
			}
			if = {
				limit = {
					exists = father
					father = { 
						is_ai = no
					}
				}
				save_scope_as = kinfolk_child
				father = { 
					trigger_event = { 			
						id = POD_werewolves_interactions.15
						days = 30
					}
				}
			}
		}		
		# Revenant
		if = {
			limit = {
				has_supernatural_race_trigger = no
				OR = {
					AND = {
						exists = mother
						mother = { 
							OR = {
								POD_is_ghoul_trigger = yes
								POD_is_revenant_trigger = yes
							}
						}
					}
					AND = {
						exists = real_father
						real_father = { 
							OR = {
								POD_is_ghoul_trigger = yes
								POD_is_revenant_trigger = yes
							}
						}
					}
				}
			}
				
			random = {
				chance = 0
				
				modifier = {
					add = 5
					AND = {
						exists = mother
						mother = { 
							POD_is_zadruga_trigger = yes
						}
					}
				}
				modifier = {
					add = 5
					AND = {
						exists = real_father
						real_father = { 
							POD_is_zadruga_trigger = yes
						}
					}
				}
				modifier = {
					add = 5
					AND = {
						exists = mother
						mother = { 
						POD_is_szlachta_trigger = yes
						}
					}	
				}
				modifier = {
					add = 5
					AND = {
						exists = real_father
						real_father = { 
						POD_is_szlachta_trigger= yes
						}
					}	
				}
				modifier = {
					add = 45
					AND = {
						exists = mother
						mother = { 
						POD_is_thinblooded_trigger = yes
						}
					}	
				}
				modifier = {
					add = 45
					AND = {
						exists = real_father
						real_father = { 
						POD_is_thinblooded_trigger = yes
						}
					}	
				}			
				modifier = {
					add = 40
					AND = {
						exists = mother
						mother = {  
						POD_is_revenant_trigger = yes
						}
					}	
				}
				modifier = {
					add = 40
					AND = {
						exists = real_father
						real_father = { 
						POD_is_revenant_trigger = yes
						}
					}	
				}
				modifier = {
					add = 20
					AND = {
						exists = mother
						mother = { 
						POD_is_ghoul_trigger = yes
						}
					}	
				}
				modifier = {
					add = 20
					AND = {
						exists = real_father
						real_father = { 
						POD_is_ghoul_trigger = yes
						}
					}	
				}
				
				add_trait = revenant
				trigger_event = POD_ghoul_maintenance.300
				add_character_flag = had_POD_character_initialization
				
				if = {
					limit = {
						is_a_neteru = yes
					}
					random_relation = {
						type = worshipped_reborn
						if = {
							limit = { has_trait = banemummy }
							scope:child = { set_character_faith = faith:viaapep }
						}
						else = {
							scope:child = { set_character_faith = faith:childofosiris }
						}
					}
				}
			}	
		}
		# Laham/Nephilim
		if = {
			limit = { 
				exists = scope:mother
				scope:mother = { is_a_host = yes }
			}
			scope:mother = {
				random_relation = {
					type = possessesing_wraith
					limit = { has_trait = demon }
					save_scope_as = new_parent
				}
			}
		}
		if = {
			limit = {
				exists = scope:real_father
				scope:real_father = { is_a_host = yes }
			}
			scope:real_father = {
				random_relation = {
					type = possessesing_wraith
					limit = { has_trait = demon }
					save_scope_as = new_parent
				}
			}
		}
		if = {
			limit = {
				exists = scope:new_parent
			}
			POD_set_parent_effect = { PARENT = scope:new_parent }
			if = {
				limit = { scope:new_parent = { has_character_modifier = nephilim_decision_modifier } }
				add_trait = nephilim
			}
			else = {
				add_trait = laham
			}
			POD_character_resolve_initiation_effect = yes
			add_character_flag = had_POD_character_initialization
		}
		if = {
			limit = {
				has_trait = laham
				has_trait = nephilim
			}
			remove_trait = laham
		}
		#Dhampir
		# if = {
			# limit = {
				# OR = {
					# AND = {
						# exists = scope:mother
						# scope:mother = { 
							# has_trait = vampire
						# }
					# }
					# AND = {
						# exists = scope:real_father
						# scope:real_father = {
							# has_trait = vampire
						# }
					# }
				# }
			# }
			# add_trait = dhampir
			# POD_dhampir_initialization_effect = yes
				
			# add_character_flag = had_POD_character_initialization		
		# }
		#Dhampyr ovewrite all 
		if = {
			limit = {
				OR = {
					AND = {
						exists = scope:mother
						scope:mother = { 
							has_trait = kueijin
						}
					}
					AND = {
						exists = scope:real_father
						scope:real_father = {
							has_trait = kueijin
						}
					}
				}
			}
			POD_remove_splat_traits_effect = yes
			POD_remove_supernatural_basic_modifiers_effect = yes
			POD_remove_wrong_supernatural_traits_effect = yes
			add_trait = dhampyr
			POD_dhampyr_initialization_effect = yes
				
			add_character_flag = had_POD_character_initialization		
		}	
		# Numina talent
		if = {
			limit = { has_supernatural_race_trigger = no }
			random = {
				chance = 1
				add_trait = psychic
			}
			random = {
				chance = 1
				add_trait = lament
			}
		}
		if = {
			limit = { has_POD_race_trigger = no }
			add_trait = mortal
		}
		#Dynasts/Exaltation	
		if = {
			limit = {
				has_supernatural_race_trigger = no
				OR = {
					AND = {
						exists = mother
						mother = { 
							OR = {
								has_trait = dynast
								has_trait = dragonblooded
							}
						}
					}
					AND = {
						exists = real_father
						real_father = { 
							OR = {
								has_trait = dynast
								has_trait = dragonblooded
							}
						}
					}
				}
			}
			
			add_trait = dynast
		
			
			random = {
				chance = 25
				
				modifier = {
					add = 25
					AND = {
						exists = mother
						mother = { 
							has_trait = dragonblooded
						}
					}
				}
				
				modifier = {
					add = 25
					AND = {
						exists = real_father
						real_father = { 
							has_trait = dragonblooded
						}
					}
				}
				
				modifier = {
					add = 10
					AND = {
						exists = real_father
						real_father = { 
							has_trait = dragonblooded
							is_ai = yes
							is_landed = yes
						}
					}
				}

				modifier = {
					add = 10
					AND = {
						exists = mother
						mother = { 
							has_trait = dragonblooded
							is_ai = yes
							is_landed = yes							
						}
					}
				}
				
				modifier = {
					add = 20		
					any_close_family_member = {
						is_landed = yes
						is_ai = yes
						has_trait = dragonblooded
					}
				}
				
				add_character_flag = {
					flag = will_have_exaltation
					days = 100
				}
				
				trigger_event = { 			
					id = POL_exaltation_maintenance.1
					years = { 8 21 }
				}
			}
			
			if = {
				limit = {
					exists = mother
					mother = { 
						is_ai = no
					}
				}
				save_scope_as = dynast_child
				mother = { 
					trigger_event = { 			
						id = POD_exaltation_interactions.1
						days = 30
					}
				}
			}
			if = {
				limit = {
					exists = father
					father = { 
						is_ai = no
					}
				}
				save_scope_as = dynast_child
				father = { 
					trigger_event = { 			
						id = POD_exaltation_interactions.1
						days = 30
					}
				}
			}
		}
	}
}

# called for the mother when a pregnancy reaches the "revealed" status
# scope:mother is the pregnant mother
# scope:father is the assumed father
# scope:real_father is the biological father
on_pregnancy_mother = {
	events = {
		pregnancy.0001 # Universal hidden maintenance event
		pregnancy.1001 # Mother gives birth to current husband's child.
		pregnancy.1101 # Mother gives birth to ex-husband's child.
		pregnancy.2001 # Unwed mother gives birth to bastard child.
		pregnancy.2002 # Married mother gives birth to bastard child.
		pregnancy.2050 # Married mother in same-sex relationship.
	}
}

# called for the father when a pregnancy reaches the "revealed" status
# scope:mother is the pregnant mother
# scope:father is the assumed father
# scope:real_father is the biological father
on_pregnancy_father = {
	events = {
	
	}
}

# called for the mother when a pregnancy ends prematurely
# scope:mother is the pregnant mother
# scope:father is the assumed father
# scope:real_father is the biological father
on_pregnancy_ended_mother = {
	events = {
	
	}
}
